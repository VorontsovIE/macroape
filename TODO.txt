Absolutely necessary:
  (already work in preprocess_colle—Åtion and align_motifs) Make it available to load PCM files with (it should be first preprocessed to PWMs in a standardized way) -- may be it's better to use pipeline 

Specs and tests:
  create spec on use of MaxHashSize, MaxHashSizeDouble
  create spec for testing case when {real_pvalue == 0, threshold == best_score + 1}
  create test for nonuniform word-wise background([1,1,1,1]) and for different backgrounds

Ideas to increase perfomance:
  - Add shifting matrix elements to zero after discreeting - in such case worst suffix is zero at all positions (??! it can significantly obscure code because thresholds will be changed too, and I can't tell what is better: slight perfomance optimization or conciseness of code)
  - (?) Make rearrangment of rows by DIC decreasing in aligned pair of matrices before counting
  - Create JAVA extension for alignment_intersection methods in order to increase perfomance
  - Possibly algorithm shouldn't use hash but had two iterations: at first it determines possible hash scores for every length(if worst suffix is always zero, its flat space of scores at all pwm prefix lengths) of each pwm separately. And after that we can work with arrays which use such scores as indices via additional substructure
  
Usability issues:  
  review Collection class. Now its completely unuseful. May be it should be even in another gem (with blackjack and clustering)

remove .stdin placeholder. Use tty? method instead

use OptionParser (??? can OptionParser get stub ARGV ???)
make options more uniform so that some of them were reusable(and the question: can I apply two option parsers consequently?)